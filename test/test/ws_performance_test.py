#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
C√¥ng c·ª• ƒëo hi·ªáu su·∫•t WebSocket cho ·ª©ng d·ª•ng Gold Price Tracker
- Kh·ªüi t·∫°o 100 k·∫øt n·ªëi WebSocket
- G·ª≠i POST request ƒë·∫øn API
- ƒêo th·ªùi gian t·ª´ khi g·ª≠i POST ƒë·∫øn khi t·∫•t c·∫£ client nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t
"""

import asyncio
import time
import json
import requests
import socketio
import argparse
import psutil
import os
import statistics
from datetime import datetime
from colorama import Fore, Style, init
from tqdm import tqdm

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
CONFIG = {
    'server_url': 'http://localhost:3010',
    'api_endpoint': '/api/add',
    'num_clients': 100,
    'test_duration': 30,  # Gi√¢y
    'update_interval': 5,  # Gi√¢y
    'result_file': 'ws_performance_results.json'
}

# Bi·∫øn to√†n c·ª•c
clients = []
client_receive_times = []
connected_clients = 0
disconnected_clients = 0
test_running = True
update_start_time = None
received_updates = 0
propagation_times = []
client_receive_statuses = []

class WSClient:
    """L·ªõp ƒë·∫°i di·ªán cho m·ªôt k·∫øt n·ªëi WebSocket client"""
    
    def __init__(self, client_id, server_url):
        self.client_id = client_id
        self.sio = socketio.Client()
        self.server_url = server_url
        self.connected = False
        self.received_updates = 0
        self.last_update_time = None
        self.connect_time = None
        self.response_times = []
        self.setup_handlers()
    
    def setup_handlers(self):
        """Thi·∫øt l·∫≠p c√°c event handler cho client"""
        
        @self.sio.event
        def connect():
            global connected_clients
            self.connected = True
            self.connect_time = time.time()
            connected_clients += 1
            if CONFIG.get('verbose'):
                print(f"{Fore.GREEN}‚úì Client {self.client_id} ƒë√£ k·∫øt n·ªëi{Style.RESET_ALL}")
        
        @self.sio.event
        def disconnect():
            global disconnected_clients
            self.connected = False
            disconnected_clients += 1
            if CONFIG.get('verbose'):
                print(f"{Fore.RED}‚úó Client {self.client_id} ƒë√£ ng·∫Øt k·∫øt n·ªëi{Style.RESET_ALL}")
        
        @self.sio.on('gold-prices-updated')
        def on_gold_prices_updated(data):
            global received_updates, update_start_time, client_receive_statuses
            
            receive_time = time.time()
            self.received_updates += 1
            received_updates += 1
            
            # N·∫øu ƒë√¢y l√† c·∫≠p nh·∫≠t ƒë·∫ßu ti√™n sau khi g·ª≠i POST request
            if update_start_time and client_receive_statuses[self.client_id] is None:
                propagation_time = (receive_time - update_start_time) * 1000  # chuy·ªÉn ƒë·ªïi th√†nh ms
                propagation_times.append(propagation_time)
                client_receive_statuses[self.client_id] = propagation_time
                
                if CONFIG.get('verbose'):
                    print(f"{Fore.CYAN}‚Üí Client {self.client_id} nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau {propagation_time:.2f}ms{Style.RESET_ALL}")
    
    def connect(self):
        """K·∫øt n·ªëi ƒë·∫øn server"""
        try:
            self.sio.connect(
                self.server_url,
                transports=['websocket'],
                socketio_path='/socket.io',
                wait_timeout=10,
                headers={'clientId': str(self.client_id)}
            )
            return True
        except Exception as e:
            print(f"{Fore.RED}‚úó L·ªói khi k·∫øt n·ªëi client {self.client_id}: {str(e)}{Style.RESET_ALL}")
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        if self.connected:
            try:
                self.sio.disconnect()
            except:
                pass


async def create_clients(num_clients, server_url):
    """T·∫°o v√† k·∫øt n·ªëi c√°c client"""
    global clients, client_receive_statuses
    
    print(f"{Fore.YELLOW}‚è≥ ƒêang kh·ªüi t·∫°o {num_clients} client...{Style.RESET_ALL}")
    progress_bar = tqdm(total=num_clients, desc="K·∫øt n·ªëi client", unit="client")
    
    client_receive_statuses = [None] * num_clients
    
    for i in range(num_clients):
        client = WSClient(i, server_url)
        clients.append(client)
        
        # Th·ª≠ k·∫øt n·ªëi
        if client.connect():
            progress_bar.update(1)
        
        # Ch·ªù m·ªôt ch√∫t gi·ªØa c√°c k·∫øt n·ªëi ƒë·ªÉ tr√°nh qu√° t·∫£i
        await asyncio.sleep(0.05)
    
    progress_bar.close()
    
    # Ch·ªù t·∫•t c·∫£ client k·∫øt n·ªëi
    timeout = 10
    start_time = time.time()
    
    print(f"{Fore.YELLOW}‚è≥ ƒêang ch·ªù t·∫•t c·∫£ client k·∫øt n·ªëi ({timeout}s)...{Style.RESET_ALL}")
    
    while connected_clients < num_clients and time.time() - start_time < timeout:
        print(f"  ƒê√£ k·∫øt n·ªëi: {connected_clients}/{num_clients}", end="\r")
        await asyncio.sleep(0.5)
    
    if connected_clients < num_clients:
        print(f"{Fore.YELLOW}‚ö† Ch·ªâ c√≥ {connected_clients}/{num_clients} client k·∫øt n·ªëi sau th·ªùi gian ch·ªù{Style.RESET_ALL}")
    else:
        print(f"{Fore.GREEN}‚úì T·∫•t c·∫£ {num_clients} client ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!{Style.RESET_ALL}")


def send_gold_update():
    """G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t gi√° v√†ng"""
    global update_start_time, client_receive_statuses
    
    # Reset tr·∫°ng th√°i nh·∫≠n cho m·ªói client
    client_receive_statuses = [None] * len(clients)
    
    # T·∫°o d·ªØ li·ªáu c·∫≠p nh·∫≠t - v√≠ d·ª• gi√° v√†ng
    base_price = 7500000  # Gi√° c∆° b·∫£n
    variation = 50000     # Dao ƒë·ªông
    
    # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng duy nh·∫•t thay v√¨ m·∫£ng
    gold_type = 'gold_1'  # Ch·ªâ c·∫≠p nh·∫≠t m·ªôt lo·∫°i v√†ng cho ƒë∆°n gi·∫£n
    buy_variation = int(variation * (2 * (time.time() % 1) - 1))
    sell_variation = int(variation * (2 * ((time.time() + 0.5) % 1) - 1))
    
    # T·∫°o ƒë·ªëi t∆∞·ª£ng duy nh·∫•t v·ªõi t·∫•t c·∫£ tr∆∞·ªùng b·∫Øt bu·ªôc
    gold_data = {
        'type': gold_type,
        'name': 'V√ÄNG MI·∫æNG SJC 1L',
        'karat': '24k',
        'purity': '999.9',
        'buy_price': base_price + buy_variation,
        'sell_price': base_price + 200000 + sell_variation,
        'updated_at': datetime.now().isoformat()
    }
    
    print(f"{Fore.YELLOW}\n[{datetime.now().strftime('%H:%M:%S')}] G·ª≠i c·∫≠p nh·∫≠t gi√° v√†ng...{Style.RESET_ALL}")
    # In d·ªØ li·ªáu s·∫Ω g·ª≠i ƒëi ƒë·ªÉ debug
    print(f"D·ªØ li·ªáu g·ª≠i ƒëi: {json.dumps(gold_data, indent=2)}")
    
    try:
        # Ghi l·∫°i th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t
        update_start_time = time.time()
        
        # G·ª≠i y√™u c·∫ßu POST v·ªõi ƒë·ªëi t∆∞·ª£ng duy nh·∫•t
        response = requests.post(
            f"{CONFIG['server_url']}{CONFIG['api_endpoint']}",
            json=gold_data,  # G·ª≠i ƒë·ªëi t∆∞·ª£ng duy nh·∫•t
            headers={'Content-Type': 'application/json'},
            timeout=5
        )
        
        print(f"Response status: {response.status_code}")
        print(f"Response body: {response.text}")
        
        if response.status_code == 200:
            print(f"{Fore.GREEN}‚úì G·ª≠i c·∫≠p nh·∫≠t th√†nh c√¥ng{Style.RESET_ALL}")
            return True
        else:
            print(f"{Fore.RED}‚úó L·ªói khi g·ª≠i c·∫≠p nh·∫≠t: HTTP {response.status_code} - {response.text}{Style.RESET_ALL}")
            update_start_time = None
            return False
            
    except Exception as e:
        print(f"{Fore.RED}‚úó L·ªói khi g·ª≠i c·∫≠p nh·∫≠t: {str(e)}{Style.RESET_ALL}")
        update_start_time = None
        return False


def report_propagation_stats():
    """B√°o c√°o th·ªëng k√™ v·ªÅ th·ªùi gian lan truy·ªÅn"""
    if not propagation_times:
        return
    
    # T√≠nh c√°c th·ªëng k√™
    avg_time = sum(propagation_times) / len(propagation_times)
    min_time = min(propagation_times)
    max_time = max(propagation_times)
    
    # T√≠nh trung v·ªã
    median_time = statistics.median(propagation_times)
    
    # T√≠nh ƒë·ªô l·ªách chu·∫©n n·∫øu c√≥ nhi·ªÅu h∆°n 1 m·∫´u
    std_dev = statistics.stdev(propagation_times) if len(propagation_times) > 1 else 0
    
    # ƒê·ªãnh nghƒ©a c√°c kho·∫£ng th·ªùi gian
    time_ranges = {
        'D∆∞·ªõi 10ms': 0,
        '10-50ms': 0,
        '50-100ms': 0,
        '100-200ms': 0,
        '200-500ms': 0,
        'Tr√™n 500ms': 0
    }
    
    # Ph√¢n lo·∫°i th·ªùi gian
    for time_ms in propagation_times:
        if time_ms < 10:
            time_ranges['D∆∞·ªõi 10ms'] += 1
        elif time_ms < 50:
            time_ranges['10-50ms'] += 1
        elif time_ms < 100:
            time_ranges['50-100ms'] += 1
        elif time_ms < 200:
            time_ranges['100-200ms'] += 1
        elif time_ms < 500:
            time_ranges['200-500ms'] += 1
        else:
            time_ranges['Tr√™n 500ms'] += 1
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    print(f"\n{Fore.CYAN}üìä Th·ªëng k√™ th·ªùi gian lan truy·ªÅn:{Style.RESET_ALL}")
    print(f"  S·ªë client nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {len(propagation_times)}/{len(clients)}")
    print(f"  Th·ªùi gian trung b√¨nh: {avg_time:.2f}ms")
    print(f"  Th·ªùi gian th·∫•p nh·∫•t: {min_time:.2f}ms")
    print(f"  Th·ªùi gian cao nh·∫•t: {max_time:.2f}ms")
    print(f"  Th·ªùi gian trung v·ªã: {median_time:.2f}ms")
    print(f"  ƒê·ªô l·ªách chu·∫©n: {std_dev:.2f}ms")
    
    print(f"\n{Fore.CYAN}üìà Ph√¢n ph·ªëi th·ªùi gian:{Style.RESET_ALL}")
    for time_range, count in time_ranges.items():
        percentage = count / len(propagation_times) * 100
        print(f"  {time_range}: {count} clients ({percentage:.1f}%)")
    
    # L∆∞u k·∫øt qu·∫£
    results = {
        'timestamp': datetime.now().isoformat(),
        'config': CONFIG,
        'stats': {
            'clients_total': len(clients),
            'clients_received': len(propagation_times),
            'avg_time': avg_time,
            'min_time': min_time,
            'max_time': max_time,
            'median_time': median_time,
            'std_dev': std_dev,
            'time_distribution': {k: {'count': v, 'percentage': v / len(propagation_times) * 100} 
                                for k, v in time_ranges.items()}
        },
        'raw_data': {
            'propagation_times': propagation_times
        }
    }
    
    # L∆∞u v√†o file
    with open(CONFIG['result_file'], 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2)
    
    print(f"\n{Fore.GREEN}‚úì ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o {CONFIG['result_file']}{Style.RESET_ALL}")


async def monitor_client_receive(total_clients):
    """Theo d√µi ti·∫øn tr√¨nh nh·∫≠n c·∫≠p nh·∫≠t c·ªßa client"""
    global client_receive_statuses
    
    # T·∫°o progress bar
    pbar = tqdm(total=total_clients, desc="Clients ƒë√£ nh·∫≠n d·ªØ li·ªáu", unit="client")
    last_received = 0
    
    while test_running:
        # ƒê·∫øm s·ªë client ƒë√£ nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        received_count = sum(1 for status in client_receive_statuses if status is not None)
        
        # C·∫≠p nh·∫≠t progress bar
        if received_count > last_received:
            pbar.update(received_count - last_received)
            last_received = received_count
        
        # Ki·ªÉm tra n·∫øu t·∫•t c·∫£ client ƒë√£ nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        if received_count == total_clients:
            pbar.close()
            print(f"{Fore.GREEN}‚úì T·∫•t c·∫£ {total_clients} client ƒë√£ nh·∫≠n ƒë∆∞·ª£c c·∫≠p nh·∫≠t!{Style.RESET_ALL}")
            report_propagation_stats()
            break
        
        await asyncio.sleep(0.1)
    
    pbar.close()


async def run_test(config):
    """Ch·∫°y b√†i ki·ªÉm tra hi·ªáu su·∫•t"""
    global test_running, CONFIG, clients
    
    # C·∫≠p nh·∫≠t c·∫•u h√¨nh
    CONFIG.update(config)
    
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    print(f"{Fore.CYAN}‚è±Ô∏è  B√ÄI KI·ªÇM TRA HI·ªÜU SU·∫§T WEBSOCKET{Style.RESET_ALL}")
    print(f"{Fore.CYAN}{'=' * 60}{Style.RESET_ALL}")
    
    # Hi·ªÉn th·ªã th√¥ng tin c·∫•u h√¨nh
    print(f"\n{Fore.YELLOW}‚ÑπÔ∏è C·∫•u h√¨nh:{Style.RESET_ALL}")
    print(f"  Server URL: {CONFIG['server_url']}")
    print(f"  API Endpoint: {CONFIG['api_endpoint']}")
    print(f"  S·ªë l∆∞·ª£ng client: {CONFIG['num_clients']}")
    print(f"  Th·ªùi gian ch·∫°y: {CONFIG['test_duration']}s")
    print(f"  Th·ªùi gian gi·ªØa c√°c c·∫≠p nh·∫≠t: {CONFIG['update_interval']}s")
    
    # T·∫°o v√† k·∫øt n·ªëi clients
    await create_clients(CONFIG['num_clients'], CONFIG['server_url'])
    
    # Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t t·ª´ API
    update_task = asyncio.create_task(send_updates())
    
    # Task theo d√µi ti·∫øn tr√¨nh
    monitor_task = asyncio.create_task(monitor_client_receive(CONFIG['num_clients']))
    
    # Ch·ªù ho√†n th√†nh
    tasks = [update_task, monitor_task]
    await asyncio.gather(*tasks)
    
    # K·∫øt th√∫c test
    await end_test()


async def send_updates():
    """G·ª≠i c√°c c·∫≠p nh·∫≠t theo chu k·ª≥"""
    global test_running
    
    # Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu test
    start_time = time.time()
    
    # Chu k·ª≥ g·ª≠i c·∫≠p nh·∫≠t
    while test_running and time.time() - start_time < CONFIG['test_duration']:
        # G·ª≠i c·∫≠p nh·∫≠t
        send_gold_update()
        
        # ƒê·ª£i tr∆∞·ªõc l·∫ßn c·∫≠p nh·∫≠t ti·∫øp theo ho·∫∑c k·∫øt th√∫c s·ªõm n·∫øu h·∫øt th·ªùi gian
        remaining_time = min(
            CONFIG['update_interval'],
            CONFIG['test_duration'] - (time.time() - start_time)
        )
        
        if remaining_time <= 0:
            break
            
        # Hi·ªÉn th·ªã ƒë·∫øm ng∆∞·ª£c
        for i in range(int(remaining_time), 0, -1):
            if not test_running:
                break
            print(f"  C·∫≠p nh·∫≠t ti·∫øp theo sau: {i}s", end="\r")
            await asyncio.sleep(1)
    
    test_running = False


async def end_test():
    """K·∫øt th√∫c b√†i ki·ªÉm tra v√† gi·∫£i ph√≥ng t√†i nguy√™n"""
    global clients, test_running
    
    test_running = False
    print(f"\n{Fore.GREEN}üèÅ K·∫øt th√∫c b√†i ki·ªÉm tra{Style.RESET_ALL}")
    
    # Ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£ client
    for client in clients:
        client.disconnect()
    
    print(f"{Fore.GREEN}‚úì ƒê√£ ng·∫Øt k·∫øt n·ªëi t·∫•t c·∫£ client{Style.RESET_ALL}")


def get_process_info():
    """L·∫•y th√¥ng tin v·ªÅ process hi·ªán t·∫°i"""
    process = psutil.Process(os.getpid())
    cpu_percent = process.cpu_percent(interval=0.1)
    memory_mb = process.memory_info().rss / (1024 * 1024)
    
    return {
        'cpu_percent': cpu_percent,
        'memory_mb': memory_mb
    }


def parse_arguments():
    """Ph√¢n t√≠ch tham s·ªë d√≤ng l·ªánh"""
    parser = argparse.ArgumentParser(description='C√¥ng c·ª• ki·ªÉm tra hi·ªáu su·∫•t WebSocket')
    
    parser.add_argument('--server', type=str, default='http://localhost:3010',
                      help='URL m√°y ch·ªß (m·∫∑c ƒë·ªãnh: http://localhost:3010)')
    
    parser.add_argument('--clients', type=int, default=100,
                      help='S·ªë l∆∞·ª£ng WebSocket client (m·∫∑c ƒë·ªãnh: 100)')
    
    parser.add_argument('--duration', type=int, default=30,
                      help='Th·ªùi gian ch·∫°y b√†i ki·ªÉm tra, t√≠nh b·∫±ng gi√¢y (m·∫∑c ƒë·ªãnh: 30)')
    
    parser.add_argument('--interval', type=int, default=5,
                      help='Kho·∫£ng th·ªùi gian gi·ªØa c√°c c·∫≠p nh·∫≠t, t√≠nh b·∫±ng gi√¢y (m·∫∑c ƒë·ªãnh: 5)')
    
    parser.add_argument('--verbose', action='store_true',
                      help='Hi·ªÉn th·ªã log chi ti·∫øt')
    
    parser.add_argument('--output', type=str, default='ws_performance_results.json',
                      help='File l∆∞u k·∫øt qu·∫£ (m·∫∑c ƒë·ªãnh: ws_performance_results.json)')
    
    return parser.parse_args()


if __name__ == '__main__':
    # Ph√¢n t√≠ch tham s·ªë
    args = parse_arguments()
    
    # C·∫•u h√¨nh t·ª´ tham s·ªë
    config = {
        'server_url': args.server,
        'api_endpoint': '/api/add',
        'num_clients': args.clients,
        'test_duration': args.duration,
        'update_interval': args.interval,
        'verbose': args.verbose,
        'result_file': args.output
    }
    
    try:
        # Ch·∫°y b√†i ki·ªÉm tra
        asyncio.run(run_test(config))
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}‚ö† H·ªßy b·ªè b·ªüi ng∆∞·ªùi d√πng{Style.RESET_ALL}")
        asyncio.run(end_test())
    except Exception as e:
        print(f"\n{Fore.RED}‚úó L·ªói: {str(e)}{Style.RESET_ALL}") 